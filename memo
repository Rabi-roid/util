import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class ClassInspector {

    public static void inspectClassAsTSV(Class<?> clazz) {
        System.out.println("クラス名: " + clazz.getName());

        // フィールド
        System.out.println("=== Fields ===");
        System.out.println("修飾子\t型\t名前");
        for (Field field : clazz.getDeclaredFields()) {
            System.out.printf("%s\t%s\t%s%n",
                    Modifier.toString(field.getModifiers()),
                    field.getType().getTypeName(),
                    field.getName());
        }

        // メソッド
        System.out.println("=== Methods ===");
        System.out.println("修飾子\t戻り値\t名前\t引数");
        for (Method method : clazz.getDeclaredMethods()) {
            System.out.printf("%s\t%s\t%s\t%s%n",
                    Modifier.toString(method.getModifiers()),
                    method.getReturnType().getTypeName(),
                    method.getName(),
                    getParameterTypes(method.getParameterTypes()));
        }

        // コンストラクタ
        System.out.println("=== Constructors ===");
        System.out.println("修飾子\t名前\t引数");
        for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {
            System.out.printf("%s\t%s\t%s%n",
                    Modifier.toString(constructor.getModifiers()),
                    constructor.getName(),
                    getParameterTypes(constructor.getParameterTypes()));
        }
    }

    private static String getParameterTypes(Class<?>[] paramTypes) {
        if (paramTypes.length == 0) return "";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < paramTypes.length; i++) {
            sb.append(paramTypes[i].getTypeName());
            if (i < paramTypes.length - 1) sb.append(", ");
        }
        return sb.toString();
    }
}
